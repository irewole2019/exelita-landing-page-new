"use client"

import type React from "react"

import { useState, useRef } from "react"
import { Button } from "@/components/ui/button"
import { Upload, FileText, Download, AlertCircle, CheckCircle, Loader2 } from "lucide-react"
import { extractTextFromDocument } from "@/utils/document-extractor"
import SampleResumeLink from "./sample-resume-link"

interface AnalysisResult {
  category: string
  score: number
  strengths: string[]
  improvements: string[]
  recommendations: string[]
}

export default function ResumeAnalyzer() {
  const [file, setFile] = useState<File | null>(null)
  const [analyzing, setAnalyzing] = useState(false)
  const [analysis, setAnalysis] = useState<AnalysisResult | null>(null)
  const [error, setError] = useState("")
  const fileInputRef = useRef<HTMLInputElement>(null)

  const handleFileSelect = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const selectedFile = event.target.files?.[0]
    if (!selectedFile) return

    setFile(selectedFile)
    setError("")
    setAnalysis(null)
  }

  const handleAnalyze = async () => {
    if (!file) return

    setAnalyzing(true)
    setError("")

    try {
      // Extract text from document
      const resumeText = await extractTextFromDocument(file)

      // Send to AI analysis endpoint
      const response = await fetch("/api/resume-analysis-ai", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ resumeText }),
      })

      if (!response.ok) {
        throw new Error("Failed to analyze resume")
      }

      const result = await response.json()
      setAnalysis(result.analysis)
    } catch (err) {
      setError(err instanceof Error ? err.message : "Failed to analyze resume")
    } finally {
      setAnalyzing(false)
    }
  }

  const handleUploadClick = () => {
    fileInputRef.current?.click()
  }

  const handleDownloadReport = () => {
    if (!analysis) return

    const reportContent = `
EB-1 Resume Analysis Report
Generated by Exelita AI

Overall Score: ${analysis.score}/100
Recommended Category: ${analysis.category}

STRENGTHS:
${analysis.strengths.map((s) => `• ${s}`).join("\n")}

AREAS FOR IMPROVEMENT:
${analysis.improvements.map((i) => `• ${i}`).join("\n")}

RECOMMENDATIONS:
${analysis.recommendations.map((r) => `• ${r}`).join("\n")}

Generated on: ${new Date().toLocaleDateString()}
    `.trim()

    const blob = new Blob([reportContent], { type: "text/plain" })
    const url = URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = "eb1-resume-analysis.txt"
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  return (
    <div className="bg-white rounded-xl shadow-lg p-6 md:p-8">
      {!analysis ? (
        <div className="space-y-6">
          {/* Upload Section */}
          <div className="text-center">
            <h2 className="text-2xl font-bold text-gray-900 mb-4">Upload Your Resume</h2>
            <p className="text-gray-600 mb-6">Get an AI-powered analysis of your EB-1 visa eligibility</p>
          </div>

          {!file ? (
            <div
              onClick={handleUploadClick}
              className="border-2 border-dashed border-gray-300 rounded-lg p-12 text-center cursor-pointer hover:border-purple-400 transition-colors"
            >
              <input
                ref={fileInputRef}
                type="file"
                accept=".pdf,.docx,.txt"
                onChange={handleFileSelect}
                className="hidden"
              />

              <Upload className="h-16 w-16 text-gray-400 mx-auto mb-4" />
              <h3 className="text-xl font-semibold text-gray-900 mb-2">Click to upload your resume</h3>
              <p className="text-gray-500">PDF, DOCX, or TXT files (max 10MB)</p>
            </div>
          ) : (
            <div className="bg-gray-50 border rounded-lg p-6">
              <div className="flex items-center gap-4 mb-4">
                <FileText className="h-8 w-8 text-purple-600" />
                <div>
                  <h3 className="font-semibold text-gray-900">{file.name}</h3>
                  <p className="text-gray-500 text-sm">{Math.round(file.size / 1024)} KB</p>
                </div>
              </div>

              <Button onClick={handleAnalyze} disabled={analyzing} className="w-full bg-purple-600 hover:bg-purple-700">
                {analyzing ? (
                  <>
                    <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                    Analyzing Resume...
                  </>
                ) : (
                  "Analyze Resume"
                )}
              </Button>
            </div>
          )}

          {error && (
            <div className="flex items-center gap-2 text-red-600 bg-red-50 p-4 rounded-lg">
              <AlertCircle className="h-5 w-5 flex-shrink-0" />
              <span>{error}</span>
            </div>
          )}

          {/* Sample Resumes */}
          <div className="border-t pt-6">
            <h3 className="font-semibold text-gray-900 mb-4">Don't have a resume ready? Download sample templates:</h3>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <SampleResumeLink category="EB-1A" />
              <SampleResumeLink category="EB-1B" />
              <SampleResumeLink category="EB-1C" />
            </div>
          </div>
        </div>
      ) : (
        /* Analysis Results */
        <div className="space-y-6">
          <div className="text-center bg-green-50 p-6 rounded-lg">
            <CheckCircle className="h-12 w-12 text-green-500 mx-auto mb-4" />
            <h2 className="text-2xl font-bold text-gray-900 mb-2">Analysis Complete!</h2>
            <p className="text-gray-600">Here's your EB-1 eligibility assessment</p>
          </div>

          {/* Score and Category */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="bg-purple-50 p-6 rounded-lg text-center">
              <h3 className="text-lg font-semibold text-gray-900 mb-2">Overall Score</h3>
              <div className="text-4xl font-bold text-purple-600">{analysis.score}/100</div>
            </div>

            <div className="bg-blue-50 p-6 rounded-lg text-center">
              <h3 className="text-lg font-semibold text-gray-900 mb-2">Recommended Category</h3>
              <div className="text-2xl font-bold text-blue-600">{analysis.category}</div>
            </div>
          </div>

          {/* Detailed Analysis */}
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <div className="bg-green-50 p-6 rounded-lg">
              <h3 className="text-lg font-semibold text-green-900 mb-4 flex items-center">
                <CheckCircle className="h-5 w-5 mr-2" />
                Key Strengths
              </h3>
              <ul className="space-y-2">
                {analysis.strengths.map((strength, index) => (
                  <li key={index} className="text-green-800 text-sm">
                    • {strength}
                  </li>
                ))}
              </ul>
            </div>

            <div className="bg-amber-50 p-6 rounded-lg">
              <h3 className="text-lg font-semibold text-amber-900 mb-4 flex items-center">
                <AlertCircle className="h-5 w-5 mr-2" />
                Areas for Improvement
              </h3>
              <ul className="space-y-2">
                {analysis.improvements.map((improvement, index) => (
                  <li key={index} className="text-amber-800 text-sm">
                    • {improvement}
                  </li>
                ))}
              </ul>
            </div>
          </div>

          {/* Recommendations */}
          <div className="bg-blue-50 p-6 rounded-lg">
            <h3 className="text-lg font-semibold text-blue-900 mb-4">Specific Recommendations</h3>
            <ul className="space-y-2">
              {analysis.recommendations.map((recommendation, index) => (
                <li key={index} className="text-blue-800 text-sm">
                  • {recommendation}
                </li>
              ))}
            </ul>
          </div>

          {/* Action Buttons */}
          <div className="flex flex-col sm:flex-row gap-4">
            <Button
              onClick={handleDownloadReport}
              className="flex items-center justify-center gap-2 bg-transparent"
              variant="outline"
            >
              <Download className="h-4 w-4" />
              Download Report
            </Button>

            <Button
              onClick={() => window.open("https://forms.office.com/r/KNDUcFg5Vw", "_blank")}
              className="bg-purple-600 hover:bg-purple-700"
            >
              Get Started with Exelita
            </Button>

            <Button
              onClick={() => {
                setFile(null)
                setAnalysis(null)
                setError("")
              }}
              variant="outline"
            >
              Analyze Another Resume
            </Button>
          </div>
        </div>
      )}
    </div>
  )
}
